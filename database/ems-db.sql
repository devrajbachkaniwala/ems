/* Creating tables */

CREATE TABLE Users (
    "id" SERIAL,
    "username" VARCHAR(100) NOT NULL,
    "userPhoto" BYTEA,
    "fullName" VARCHAR(100) NOT NULL,
    "email" VARCHAR(150) NOT NULL,
    "password" VARCHAR(20) NOT NULL,
    "role" VARCHAR(20) DEFAULT 'user' NOT NULL,
    "isActive" BOOLEAN DEFAULT TRUE NOT NULL,
    "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    "modifiedAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT PK_USERS PRIMARY KEY ("id"),
    CONSTRAINT UQ_USERS UNIQUE ("email")
);

CREATE TABLE Organizations (
    "id" SERIAL,
    "name" VARCHAR(100) NOT NULL,
    "description" TEXT NOT NULL,
    "contactNo" VARCHAR(20) NOT NULL,
    "email" VARCHAR(150) NOT NULL,
    "photo" BYTEA NOT NULL,
    "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    "modifiedAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT PK_ORGANIZATIONS PRIMARY KEY ("id")
);

CREATE TABLE Events (
    "id" SERIAL,
    "orgId" INT NOT NULL,
    "name" VARCHAR(100) NOT NULL,
    "description" TEXT NOT NULL,
    "city" VARCHAR(85) NOT NULL,
    "state" VARCHAR(15) NOT NULL,
    "country" VARCHAR(56) NOT NULL,
    "venue" VARCHAR(255) NOT NULL,
    "category" VARCHAR(50) NOT NULL,
    "geoLatLng" POINT NOT NULL,
    "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    "modifiedAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT PK_EVENTS PRIMARY KEY ("id")
);

CREATE TABLE EventPhotos (
    "id" SERIAL,
    "photo" BYTEA NOT NULL,
    "eventId" INT NOT NULL,
    "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    "modifiedAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT PK_EVENTPHOTOS PRIMARY KEY ("id")
);

CREATE TABLE EventTimings (
    "id" SERIAL,
    "date" DATE NOT NULL,
    "startTime" TIME NOT NULL,
    "endTime" TIME NOT NULL,
    "eventId" INT NOT NULL,
    CONSTRAINT PK_EVENTTIMINGS PRIMARY KEY ("id")
);

CREATE TABLE Reviews (
    "id" SERIAL,
    "description" TEXT NOT NULL,
    "star" INT NOT NULL,
    "eventId" INT NOT NULL,
    "userId" INT NOT NULL,
    "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    "modifiedAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT PK_REVIEWS PRIMARY KEY ("id")
);

CREATE TABLE Bookings (
    "id" SERIAL,
    "eventId" INT NOT NULL,
    "userId" INT NOT NULL,
    "createdAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    "modifiedAt" TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    CONSTRAINT PK_BOOKINGS PRIMARY KEY ("id")
);

CREATE TABLE BookingItems (
    "id" SERIAL,
    "bookingId" INT NOT NULL,
    "priceId" INT NOT NULL,
    "orgId" INT NOT NULL,
    "timingId" INT NOT NULL,
    "qty" INT NOT NULL,
    "status" VARCHAR(255) DEFAULT 'active' NOT NULL,
    CONSTRAINT PK_BOOKINGITEMS PRIMARY KEY ("id"),
    CONSTRAINT UQ_BOOKINGITEMS UNIQUE ("bookingId")
);

CREATE TABLE EventPrices (
    "id" SERIAL,
    "eventId" INT NOT NULL,
    "price" INT NOT NULL,
    "currency" VARCHAR(100) NOT NULL,
    "maxLimit" INT DEFAULT 0 NOT NULL,
    "sold" INT DEFAULT 0 NOT NULL,
    CONSTRAINT PK_EVENTPRICES PRIMARY KEY ("id")
);

CREATE TABLE OrganizationTeamMembers (
    "id" SERIAL,
    "orgId" INT NOT NULL,
    "userId" INT NOT NULL,
    CONSTRAINT PK_ORGANIZATIONTEAMMEMBERS PRIMARY KEY ("id"),
    CONSTRAINT UQ_ORGANINZATIONTEAMMEMBERS UNIQUE ("userId")
);

CREATE TABLE RefreshTokens (
    "id" SERIAL,
    "refreshToken" VARCHAR(120) NOT NULL,
    CONSTRAINT PK_REFRESHTOKENS PRIMARY KEY ("id"),
    CONSTRAINT UQ_REFRESHTOKENS UNIQUE ("refreshToken")
);

/* Adding foreign key constraint to the table */

ALTER TABLE Events
ADD CONSTRAINT FK_EVENTS_ORGANIZATIONS FOREIGN KEY ("orgId") REFERENCES Organizations("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE EventPhotos
ADD CONSTRAINT FK_EVENTPHOTOS_EVENTS FOREIGN KEY ("eventId") REFERENCES Events("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE EventTimings
ADD CONSTRAINT FK_EVENTTIMINGS_EVENTS FOREIGN KEY ("eventId") REFERENCES Events("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Reviews
ADD CONSTRAINT FK_REVIEWS_EVENTS FOREIGN KEY ("eventId") REFERENCES Events("id") ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_REVIEWS_USERS FOREIGN KEY ("userId") REFERENCES Users("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE Bookings
ADD CONSTRAINT FK_BOOKINGS_USERS FOREIGN KEY ("userId") REFERENCES Users("id") ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_BOOKINGS_EVENTS FOREIGN KEY ("eventId") REFERENCES Events("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE BookingItems
ADD CONSTRAINT FK_BOOKINGITEMS_BOOKINGS FOREIGN KEY ("bookingId") REFERENCES Bookings("id") ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_BOOKINGITEMS_ORGANIZATIONS FOREIGN KEY ("orgId") REFERENCES Organizations("id") ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_BOOKINGITEMS_EVENTPRICES FOREIGN KEY ("priceId") REFERENCES EventPrices("id") ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_BOOKINGITEMS_EVENTTIMINGS FOREIGN KEY ("timingId") REFERENCES EventTimings("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE EventPrices
ADD CONSTRAINT FK_EVENTPRICES_EVENTS FOREIGN KEY ("eventId") REFERENCES Events("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE OrganizationTeamMembers
ADD CONSTRAINT FK_ORGANINZATIONTEAMMEMBERS_USERS FOREIGN KEY ("userId") REFERENCES Users("id") ON DELETE CASCADE ON UPDATE CASCADE,
ADD CONSTRAINT FK_ORGANINZATIONTEAMMEMBERS_ORGANIZATIONS FOREIGN KEY ("orgId") REFERENCES Organizations("id") ON DELETE CASCADE ON UPDATE CASCADE;


/* Trigger for adding sold ticket in event prices table */

CREATE OR REPLACE FUNCTION add_sold_ticket()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
    soldTicket INTEGER;
    totalSold INTEGER;
BEGIN
    SELECT EventPrices."sold" INTO soldTicket 
    FROM EventPrices 
    WHERE EventPrices."id" = NEW."priceId";

    totalSold = soldTicket + NEW."qty";

    UPDATE EventPrices SET "sold" = totalSold WHERE "id" = NEW."priceId";

    RETURN NEW;

END;
$$;

CREATE TRIGGER ADDSOLDTICKET
AFTER INSERT
ON BOOKINGITEMS
FOR EACH ROW
EXECUTE FUNCTION add_sold_ticket();

/* Trigger for updating sold tickets when user cancel's their booked events */

CREATE OR REPLACE FUNCTION cancel_sold_ticket()
RETURNS TRIGGER
LANGUAGE PLPGSQL
AS $$
DECLARE
    soldTicket INTEGER;
    totalSold INTEGER;
BEGIN
    IF NEW."status" = 'cancel' THEN    

        SELECT EventPrices."sold" INTO soldTicket 
        FROM EventPrices 
        WHERE EventPrices."id" = OLD."priceId";

        totalSold = soldTicket - OLD."qty";

        UPDATE EventPrices SET "sold" = totalSold WHERE "id" = OLD."priceId";
        RETURN OLD;
    END IF;
END;
$$;

CREATE TRIGGER CANCELSOLDTICKET
AFTER UPDATE
ON BOOKINGITEMS
FOR EACH ROW
EXECUTE FUNCTION cancel_sold_ticket();

/* Creating indexes */

CREATE INDEX Users_Idx
ON Users ("createdAt" DESC);

CREATE INDEX Events_Idx 
ON Events ("category", "createdAt" DESC);

CREATE INDEX Events_GeoLocation_Idx
ON Events USING GiST("geoLatLng");

CREATE INDEX EventPrices_Idx
ON EventPrices ("sold" DESC);

CREATE INDEX Bookings_Idx
ON Bookings ("createdAt" DESC);